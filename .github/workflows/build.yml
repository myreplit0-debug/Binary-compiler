- name: bundle ${{ matrix.t.name }}
        env:
          NAME:  ${{ matrix.t.name }}
          BUILD: ${{ steps.build.outputs.build_dir }}
          FQBN:  ${{ matrix.t.fqbn }}
        run: |
          set -e
          echo "Using BUILD=$BUILD"
          test -d "$BUILD"

          mkdir -p out/$NAME

          # ---- build outputs (from compile) ----
          APP=$(find "$BUILD" -maxdepth 2 -type f -name '*.ino.bin'        -print -quit)
          PART=$(find "$BUILD" -maxdepth 2 -type f -name '*partitions.bin'  -print -quit)
          BOOT=$(find "$BUILD" -maxdepth 3 -type f -name 'bootloader*.bin'  -print -quit || true)

          if [ -z "$APP" ] || [ -z "$PART" ]; then
            echo "Build outputs missing; tree follows:"
            ls -R "$BUILD"
            exit 1
          fi

          # ---- locate core install dir robustly ----
          DATA_DIR=$(arduino-cli config dump --format json | jq -r '.directories.data')
          HW_BASE="$DATA_DIR/packages/esp32/hardware/esp32"
          if [ ! -d "$HW_BASE" ]; then
            echo "ESP32 core not found under $HW_BASE"
            find "$DATA_DIR/packages" -maxdepth 3 -type d -print | sed 's/^/  /'
            exit 1
          fi
          CORE_VER=$(ls -1 "$HW_BASE" | sort -V | tail -n1)
          CORE="$HW_BASE/$CORE_VER"
          echo "Core dir: $CORE"

          # ---- prebuilt bootloader / boot_app0 from core tools ----
          FAMILY=$(echo "$FQBN" | awk -F: '{print $3}')
          if [ -z "$BOOT" ]; then
            if [ "$FAMILY" = "esp32s3" ]; then
              BOOT=$(find "$CORE/tools" -type f -path '*/esp32s3/bin/*' -name 'bootloader*.bin' -print -quit)
            else
              BOOT=$(find "$CORE/tools" -type f -path '*/esp32/bin/*'   -name 'bootloader*.bin' -print -quit)
            fi
          fi

          if [ "$FAMILY" = "esp32s3" ]; then
            APP0=$(find "$CORE/tools" -type f -path '*/esp32s3/bin/*' -name 'boot_app0.bin' -print -quit)
          else
            APP0=$(find "$CORE/tools" -type f -path '*/esp32/bin/*' -name 'boot_app0.bin' -print -quit)
          fi
          # fallback search anywhere under core
          if [ -z "$APP0" ]; then APP0=$(find "$CORE" -type f -name 'boot_app0.bin' -print -quit); fi

          : ${BOOT:?bootloader.bin not found in core tools}
          : ${APP0:?boot_app0.bin not found in core}

          # ---- copy & name consistently ----
          cp "$APP"  out/$NAME/firmware.bin
          cp "$PART" out/$NAME/partitions.bin
          cp "$BOOT" out/$NAME/bootloader.bin
          cp "$APP0" out/$NAME/boot_app0.bin

          # ---- offsets file for phone flasher ----
          cat > out/$NAME/flash_offsets.txt <<'EOF'
bootloader.bin  0x0000
partitions.bin  0x8000
boot_app0.bin   0xE000
firmware.bin    0x10000
EOF

          (cd out/$NAME && zip -9 ../${NAME}_bins.zip bootloader.bin partitions.bin boot_app0.bin firmware.bin flash_offsets.txt)
