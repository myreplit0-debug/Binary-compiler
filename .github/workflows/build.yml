name: build

on:
  push:
    paths: ["**/*.ino", ".github/workflows/build.yml"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        t:
          - { name: ice, sketch_dir: "ice_ble_uart", fqbn: "esp32:esp32:esp32s3" }

    steps:
      - uses: actions/checkout@v4

      - name: Show repo tree
        run: |
          find . -maxdepth 3 -type f -name "*.ino" -print

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Install ESP32 core & tools
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32
          sudo apt-get update
          sudo apt-get install -y jq zip

      # NEW: required libraries
      - name: Install required Arduino libraries
        run: |
          arduino-cli lib update-index
          # Pin if you want a specific version, e.g. "NimBLE-Arduino@1.4.1"
          arduino-cli lib install "NimBLE-Arduino"

      - name: Compile & bundle ${{ matrix.t.name }}
        env:
          FQBN:       ${{ matrix.t.fqbn }}
          SKETCH_DIR: ${{ matrix.t.sketch_dir }}
          NAME:       ${{ matrix.t.name }}
        run: |
          set -e
          arduino-cli compile --fqbn "$FQBN" --export-binaries "$SKETCH_DIR"
          BUILD="$(arduino-cli compile --fqbn "$FQBN" --show-properties "$SKETCH_DIR" | sed -n 's/^build.path=//p' | tail -n1)"
          mkdir -p out/$NAME
          APP="$(ls "$BUILD"/*.ino.bin 2>/dev/null | head -n1)"
          PART="$(ls "$BUILD"/*partitions.bin 2>/dev/null | head -n1)"
          BOOT="$(ls "$BUILD"/*.bootloader.bin 2>/dev/null | head -n1 || true)"
          if [ -z "$BOOT" ]; then BOOT="$(find "$BUILD" -name 'bootloader*.bin' -print -quit)"; fi
          DATA_DIR="$(arduino-cli config dump --format json | jq -r '.directories.data')"
          APP0="$(find "$DATA_DIR/packages/esp32" -type f -name 'boot_app0.bin' -print -quit)"
          : "${APP:?app .ino.bin not found}"
          : "${PART:?partitions.bin not found}"
          : "${BOOT:?bootloader.bin not found}"
          : "${APP0:?boot_app0.bin not found}"
          cp "$APP"  out/$NAME/firmware.bin
          cp "$PART" out/$NAME/partitions.bin
          cp "$BOOT" out/$NAME/bootloader.bin
          cp "$APP0" out/$NAME/boot_app0.bin
          cat > out/$NAME/flash_offsets.txt <<'EOF'
          bootloader.bin  0x0000
          partitions.bin  0x8000
          boot_app0.bin   0xE000
          firmware.bin    0x10000
          EOF
          (cd out/$NAME && zip -9 ../"${NAME}_bins".zip bootloader.bin partitions.bin boot_app0.bin firmware.bin flash_offsets.txt)

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.t.name }}_bins
          path: out/${{ matrix.t.name }}/*
