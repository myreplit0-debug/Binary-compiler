name: build

on:
  push:
    paths:
      - "**/*.ino"
      - ".github/workflows/build.yml"
  workflow_dispatch:

jobs:
  make:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        t:
          - { name: ui,    sketch: ui_web_s3_ap/ui_web_s3_ap.ino,     fqbn: "esp32:esp32:esp32s3" }
          - { name: smoke, sketch: smoke_chain_s3/smoke_chain_s3.ino, fqbn: "esp32:esp32:esp32s3" }
          - { name: ice,   sketch: ice_ble_uart/ice_ble_uart.ino,     fqbn: "esp32:esp32:esp32" }

    steps:
      - uses: actions/checkout@v4

      - uses: arduino/setup-arduino-cli@v1

      - name: deps
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32
          sudo apt-get update
          sudo apt-get install -y jq zip

      - name: compile ${{ matrix.t.name }}
        env:
          FQBN:   ${{ matrix.t.fqbn }}
          SKETCH: ${{ matrix.t.sketch }}
        run: |
          set -e
          # build + export
          arduino-cli compile --fqbn "$FQBN" --export-binaries "$SKETCH"
          # get the build.path (folder with .bin files)
          BUILD=$(arduino-cli compile --fqbn "$FQBN" --show-properties "$SKETCH" \
                  | sed -n 's/^build.path=//p' | tail -n1)
          echo "BUILD=$BUILD" >> "$GITHUB_ENV"
          echo "Build dir: $BUILD"
          ls -la "$BUILD" || true

      - name: bundle ${{ matrix.t.name }}
        env:
          NAME: ${{ matrix.t.name }}
        run: |
          set -e
          mkdir -p out/$NAME

          # locate files produced by ESP32 core
          APP=$(find "$BUILD" -maxdepth 2 -type f -name '*.ino.bin' -print -quit)
          PART=$(find "$BUILD" -maxdepth 2 -type f -name '*partitions.bin' -print -quit)
          BOOT=$(find "$BUILD" -maxdepth 2 -type f -name 'bootloader*.bin' -print -quit)

          echo "APP=$APP"
          echo "PART=$PART"
          echo "BOOT=$BOOT"

          if [ -z "$APP" ]; then echo "ERROR: app *.ino.bin not found"; ls -R "$BUILD"; exit 1; fi
          if [ -z "$PART" ]; then echo "ERROR: *partitions.bin not found"; ls -R "$BUILD"; exit 1; fi
          if [ -z "$BOOT" ]; then echo "ERROR: bootloader*.bin not found"; ls -R "$BUILD"; exit 1; fi

          cp "$APP"  out/$NAME/firmware.bin
          cp "$PART" out/$NAME/partitions.bin
          cp "$BOOT" out/$NAME/bootloader.bin

          # boot_app0 from the core install
          CORE=$(arduino-cli core list --format json | jq -r '.installed[]|select(.name|contains("esp32"))|.install_dir' | head -n1)
          APP0=$(find "$CORE" -type f -name 'boot_app0.bin' -print -quit)
          if [ -z "$APP0" ]; then echo "ERROR: boot_app0.bin not found in core"; exit 1; fi
          cp "$APP0" out/$NAME/boot_app0.bin

          # offsets (text file)
          printf "bootloader.bin  0x0000\npartitions.bin  0x8000\nboot_app0.bin   0xE000\nfirmware.bin    0x10000\n" \
            > out/$NAME/flash_offsets.txt

          (cd out/$NAME && zip -9 ../${NAME}_bins.zip bootloader.bin partitions.bin boot_app0.bin firmware.bin flash_offsets.txt)

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.t.name }}_bins
          path: out/${{ matrix.t.name }}/*
