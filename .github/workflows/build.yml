name: build

on:
  push:
    paths:
      - "**/*.ino"
      - ".github/workflows/build.yml"
  workflow_dispatch:

jobs:
  make:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        t:
          # Keep the file/folder names exactly as below
          - { name: ui,    sketch: ui_web_s3_ap/ui_web_s3_ap.ino,       fqbn: "esp32:esp32:esp32s3" }
          - { name: smoke, sketch: smoke_chain_s3/smoke_chain_s3.ino,   fqbn: "esp32:esp32:esp32s3" }
          - { name: ice,   sketch: ice_ble_uart/ice_ble_uart.ino,       fqbn: "esp32:esp32:esp32" }

    steps:
      - uses: actions/checkout@v4

      - uses: arduino/setup-arduino-cli@v1

      - name: deps
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32
          sudo apt-get update
          sudo apt-get install -y jq zip

      - name: compile ${{ matrix.t.name }}
        env:
          FQBN:   ${{ matrix.t.fqbn }}
          SKETCH: ${{ matrix.t.sketch }}
        run: |
          set -e
          arduino-cli compile --fqbn "$FQBN" --export-binaries "$SKETCH"
          BUILD=$(arduino-cli compile --fqbn "$FQBN" --show-properties "$SKETCH" | awk -F= '/^build.path=/{print $2; exit}')
          echo "BUILD=$BUILD" >> "$GITHUB_ENV"

      - name: bundle ${{ matrix.t.name }}
        env:
          NAME: ${{ matrix.t.name }}
        run: |
          set -e
          mkdir -p out/$NAME
          cp "$BUILD"/*.bin out/$NAME/ || true

          # normalize app -> firmware.bin
          APP=$(ls "$BUILD"/*/*.ino.bin "$BUILD"/*.ino.bin 2>/dev/null | head -n1 || true)
          if [ -z "$APP" ]; then APP=$(ls out/$NAME/*.bin | head -n1); fi
          cp "$APP" out/$NAME/firmware.bin

          # partitions & bootloader from build; boot_app0 from core
          cp "$(find "$BUILD" -name 'partitions.bin' | head -n1)"   out/$NAME/partitions.bin
          cp "$(find "$BUILD" -name 'bootloader*.bin' | head -n1)"  out/$NAME/bootloader.bin
          CORE=$(arduino-cli core list --format json | jq -r '.installed[]|select(.name|contains("esp32"))|.install_dir' | head -n1)
          cp "$(find "$CORE" -name 'boot_app0.bin' | head -n1)"     out/$NAME/boot_app0.bin

          # offsets text (no here-doc)
          printf "bootloader.bin  0x0000\npartitions.bin  0x8000\nboot_app0.bin   0xE000\nfirmware.bin    0x10000\n" > out/$NAME/flash_offsets.txt

          (cd out/$NAME && zip -9 ../${NAME}_bins.zip bootloader.bin partitions.bin boot_app0.bin firmware.bin flash_offsets.txt)

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.t.name }}_bins
          path: out/${{ matrix.t.name }}/*
